import * as tslib_1 from "tslib";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { NgModule, NgModuleFactoryLoader } from '@angular/core';
import { ModuleMapNgFactoryLoader, MODULE_MAP } from './module-map-ngfactory-loader';
/**
 * Helper function for getting the providers object for the MODULE_MAP
 *
 * @param moduleMap Map to use as a value for MODULE_MAP
 */
import * as ɵngcc0 from '@angular/core';
export function provideModuleMap(moduleMap) {
    return {
        provide: MODULE_MAP,
        useValue: moduleMap
    };
}
/**
 * Module for using a NgModuleFactoryLoader which does not lazy load
 */
var ModuleMapLoaderModule = /** @class */ (function () {
    function ModuleMapLoaderModule() {
    }
    ModuleMapLoaderModule_1 = ModuleMapLoaderModule;
    /**
     * Returns a ModuleMapLoaderModule along with a MODULE_MAP
     *
     * @param moduleMap Map to use as a value for MODULE_MAP
     */
    ModuleMapLoaderModule.withMap = function (moduleMap) {
        return {
            ngModule: ModuleMapLoaderModule_1,
            providers: [
                {
                    provide: MODULE_MAP,
                    useValue: moduleMap
                }
            ]
        };
    };
    var ModuleMapLoaderModule_1;
ModuleMapLoaderModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: ModuleMapLoaderModule });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ModuleMapLoaderModule, [{
        type: NgModule,
        args: [{
                providers: [
                    {
                        provide: NgModuleFactoryLoader,
                        useClass: ModuleMapNgFactoryLoader
                    }
                ]
            }]
    }], function () { return []; }, null);
ModuleMapLoaderModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function ModuleMapLoaderModule_Factory(t) { return new (t || ModuleMapLoaderModule)(); }, providers: [
        {
            provide: NgModuleFactoryLoader,
            useClass: ModuleMapNgFactoryLoader
        }
    ] });
    return ModuleMapLoaderModule;
}());
export { ModuleMapLoaderModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3NlcmdpL3NvdXJjZS9yZXBvcy9UZW1wbGF0ZS9UZW1wbGF0ZS9DbGllbnRBcHAvbm9kZV9tb2R1bGVzL0BuZ3VuaXZlcnNhbC9tb2R1bGUtbWFwLW5nZmFjdG9yeS1sb2FkZXIvZXNtNS9zcmMvbW9kdWxlLW1hcC1sb2FkZXIubW9kdWxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0FBZUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dDQTZCZ0M7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQVVGIiwiZmlsZSI6Im1vZHVsZS1tYXAtbG9hZGVyLm1vZHVsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IE5nTW9kdWxlLCBOZ01vZHVsZUZhY3RvcnlMb2FkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1vZHVsZU1hcE5nRmFjdG9yeUxvYWRlciwgTU9EVUxFX01BUCB9IGZyb20gJy4vbW9kdWxlLW1hcC1uZ2ZhY3RvcnktbG9hZGVyJztcbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIGZvciBnZXR0aW5nIHRoZSBwcm92aWRlcnMgb2JqZWN0IGZvciB0aGUgTU9EVUxFX01BUFxuICpcbiAqIEBwYXJhbSBtb2R1bGVNYXAgTWFwIHRvIHVzZSBhcyBhIHZhbHVlIGZvciBNT0RVTEVfTUFQXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlTW9kdWxlTWFwKG1vZHVsZU1hcCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHByb3ZpZGU6IE1PRFVMRV9NQVAsXG4gICAgICAgIHVzZVZhbHVlOiBtb2R1bGVNYXBcbiAgICB9O1xufVxuLyoqXG4gKiBNb2R1bGUgZm9yIHVzaW5nIGEgTmdNb2R1bGVGYWN0b3J5TG9hZGVyIHdoaWNoIGRvZXMgbm90IGxhenkgbG9hZFxuICovXG52YXIgTW9kdWxlTWFwTG9hZGVyTW9kdWxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1vZHVsZU1hcExvYWRlck1vZHVsZSgpIHtcbiAgICB9XG4gICAgTW9kdWxlTWFwTG9hZGVyTW9kdWxlXzEgPSBNb2R1bGVNYXBMb2FkZXJNb2R1bGU7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIE1vZHVsZU1hcExvYWRlck1vZHVsZSBhbG9uZyB3aXRoIGEgTU9EVUxFX01BUFxuICAgICAqXG4gICAgICogQHBhcmFtIG1vZHVsZU1hcCBNYXAgdG8gdXNlIGFzIGEgdmFsdWUgZm9yIE1PRFVMRV9NQVBcbiAgICAgKi9cbiAgICBNb2R1bGVNYXBMb2FkZXJNb2R1bGUud2l0aE1hcCA9IGZ1bmN0aW9uIChtb2R1bGVNYXApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBNb2R1bGVNYXBMb2FkZXJNb2R1bGVfMSxcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogTU9EVUxFX01BUCxcbiAgICAgICAgICAgICAgICAgICAgdXNlVmFsdWU6IG1vZHVsZU1hcFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBNb2R1bGVNYXBMb2FkZXJNb2R1bGVfMTtcbiAgICBNb2R1bGVNYXBMb2FkZXJNb2R1bGUgPSBNb2R1bGVNYXBMb2FkZXJNb2R1bGVfMSA9IHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgICAgIE5nTW9kdWxlKHtcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogTmdNb2R1bGVGYWN0b3J5TG9hZGVyLFxuICAgICAgICAgICAgICAgICAgICB1c2VDbGFzczogTW9kdWxlTWFwTmdGYWN0b3J5TG9hZGVyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9KVxuICAgIF0sIE1vZHVsZU1hcExvYWRlck1vZHVsZSk7XG4gICAgcmV0dXJuIE1vZHVsZU1hcExvYWRlck1vZHVsZTtcbn0oKSk7XG5leHBvcnQgeyBNb2R1bGVNYXBMb2FkZXJNb2R1bGUgfTtcbiJdfQ==