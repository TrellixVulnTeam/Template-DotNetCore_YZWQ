import * as tslib_1 from "tslib";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Injectable, InjectionToken, Inject, Compiler } from '@angular/core';
/**
 * Token used by the ModuleMapNgFactoryLoader to load modules
 */
import * as ɵngcc0 from '@angular/core';
export var MODULE_MAP = new InjectionToken('MODULE_MAP');
/**
 * NgModuleFactoryLoader which does not lazy load
 */
var ModuleMapNgFactoryLoader = /** @class */ (function () {
    function ModuleMapNgFactoryLoader(compiler, moduleMap) {
        this.compiler = compiler;
        this.moduleMap = moduleMap;
    }
    ModuleMapNgFactoryLoader.prototype.load = function (loadChildrenString) {
        var offlineMode = this.compiler instanceof Compiler;
        var type = this.moduleMap[loadChildrenString];
        if (!type) {
            throw new Error(loadChildrenString + " did not exist in the MODULE_MAP");
        }
        return offlineMode ?
            this.loadFactory(type) : this.loadAndCompile(type);
    };
    ModuleMapNgFactoryLoader.prototype.loadFactory = function (factory) {
        return new Promise(function (resolve) { return resolve(factory); });
    };
    ModuleMapNgFactoryLoader.prototype.loadAndCompile = function (type) {
        return this.compiler.compileModuleAsync(type);
    };
    ModuleMapNgFactoryLoader = tslib_1.__decorate([
        tslib_1.__param(1, Inject(MODULE_MAP)),
        tslib_1.__metadata("design:paramtypes", [Compiler, Object])
    ], ModuleMapNgFactoryLoader);
ModuleMapNgFactoryLoader.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: ModuleMapNgFactoryLoader, factory: function ModuleMapNgFactoryLoader_Factory(t) { return new (t || ModuleMapNgFactoryLoader)(ɵngcc0.ɵɵinject(Compiler), ɵngcc0.ɵɵinject(MODULE_MAP)); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ModuleMapNgFactoryLoader, [{
        type: Injectable
    }], function () { return [{ type: Compiler }, { type: Object, decorators: [{
                type: Inject,
                args: [MODULE_MAP]
            }] }]; }, { compiler: [], moduleMap: [], load: [], loadFactory: [], loadAndCompile: [] });
    return ModuleMapNgFactoryLoader;
}());
export { ModuleMapNgFactoryLoader };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3NlcmdpL3NvdXJjZS9yZXBvcy9UZW1wbGF0ZS9UZW1wbGF0ZS9DbGllbnRBcHAvbm9kZV9tb2R1bGVzL0BuZ3VuaXZlcnNhbC9tb2R1bGUtbWFwLW5nZmFjdG9yeS1sb2FkZXIvZXNtNS9zcmMvbW9kdWxlLW1hcC1uZ2ZhY3RvcnktbG9hZGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttREF3Qm1ELEFBQzlCOzs7Ozs7Ozs7O3NHQUdZIiwiZmlsZSI6Im1vZHVsZS1tYXAtbmdmYWN0b3J5LWxvYWRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUsIEluamVjdGlvblRva2VuLCBJbmplY3QsIENvbXBpbGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKipcbiAqIFRva2VuIHVzZWQgYnkgdGhlIE1vZHVsZU1hcE5nRmFjdG9yeUxvYWRlciB0byBsb2FkIG1vZHVsZXNcbiAqL1xuZXhwb3J0IHZhciBNT0RVTEVfTUFQID0gbmV3IEluamVjdGlvblRva2VuKCdNT0RVTEVfTUFQJyk7XG4vKipcbiAqIE5nTW9kdWxlRmFjdG9yeUxvYWRlciB3aGljaCBkb2VzIG5vdCBsYXp5IGxvYWRcbiAqL1xudmFyIE1vZHVsZU1hcE5nRmFjdG9yeUxvYWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNb2R1bGVNYXBOZ0ZhY3RvcnlMb2FkZXIoY29tcGlsZXIsIG1vZHVsZU1hcCkge1xuICAgICAgICB0aGlzLmNvbXBpbGVyID0gY29tcGlsZXI7XG4gICAgICAgIHRoaXMubW9kdWxlTWFwID0gbW9kdWxlTWFwO1xuICAgIH1cbiAgICBNb2R1bGVNYXBOZ0ZhY3RvcnlMb2FkZXIucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAobG9hZENoaWxkcmVuU3RyaW5nKSB7XG4gICAgICAgIHZhciBvZmZsaW5lTW9kZSA9IHRoaXMuY29tcGlsZXIgaW5zdGFuY2VvZiBDb21waWxlcjtcbiAgICAgICAgdmFyIHR5cGUgPSB0aGlzLm1vZHVsZU1hcFtsb2FkQ2hpbGRyZW5TdHJpbmddO1xuICAgICAgICBpZiAoIXR5cGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihsb2FkQ2hpbGRyZW5TdHJpbmcgKyBcIiBkaWQgbm90IGV4aXN0IGluIHRoZSBNT0RVTEVfTUFQXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvZmZsaW5lTW9kZSA/XG4gICAgICAgICAgICB0aGlzLmxvYWRGYWN0b3J5KHR5cGUpIDogdGhpcy5sb2FkQW5kQ29tcGlsZSh0eXBlKTtcbiAgICB9O1xuICAgIE1vZHVsZU1hcE5nRmFjdG9yeUxvYWRlci5wcm90b3R5cGUubG9hZEZhY3RvcnkgPSBmdW5jdGlvbiAoZmFjdG9yeSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmV0dXJuIHJlc29sdmUoZmFjdG9yeSk7IH0pO1xuICAgIH07XG4gICAgTW9kdWxlTWFwTmdGYWN0b3J5TG9hZGVyLnByb3RvdHlwZS5sb2FkQW5kQ29tcGlsZSA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBpbGVyLmNvbXBpbGVNb2R1bGVBc3luYyh0eXBlKTtcbiAgICB9O1xuICAgIE1vZHVsZU1hcE5nRmFjdG9yeUxvYWRlciA9IHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgICAgIEluamVjdGFibGUoKSxcbiAgICAgICAgdHNsaWJfMS5fX3BhcmFtKDEsIEluamVjdChNT0RVTEVfTUFQKSksXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtDb21waWxlciwgT2JqZWN0XSlcbiAgICBdLCBNb2R1bGVNYXBOZ0ZhY3RvcnlMb2FkZXIpO1xuICAgIHJldHVybiBNb2R1bGVNYXBOZ0ZhY3RvcnlMb2FkZXI7XG59KCkpO1xuZXhwb3J0IHsgTW9kdWxlTWFwTmdGYWN0b3J5TG9hZGVyIH07XG4iXX0=