{"version":3,"sources":["c:/Users/sergi/source/repos/Template/Template/ClientApp/node_modules/@nguniversal/module-map-ngfactory-loader/fesm2015/module-map-ngfactory-loader.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgDC,sHAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAwDD,QAUC","file":"module-map-ngfactory-loader.js","sourcesContent":["import { InjectionToken, Compiler, Injectable, Inject, NgModule, NgModuleFactoryLoader } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Token used by the ModuleMapNgFactoryLoader to load modules\n * @type {?}\n */\nconst MODULE_MAP = new InjectionToken('MODULE_MAP');\n/**\n * NgModuleFactoryLoader which does not lazy load\n */\nclass ModuleMapNgFactoryLoader {\n    /**\n     * @param {?} compiler\n     * @param {?} moduleMap\n     */\n    constructor(compiler, moduleMap) {\n        this.compiler = compiler;\n        this.moduleMap = moduleMap;\n    }\n    /**\n     * @param {?} loadChildrenString\n     * @return {?}\n     */\n    load(loadChildrenString) {\n        /** @type {?} */\n        const offlineMode = this.compiler instanceof Compiler;\n        /** @type {?} */\n        const type = this.moduleMap[loadChildrenString];\n        if (!type) {\n            throw new Error(`${loadChildrenString} did not exist in the MODULE_MAP`);\n        }\n        return offlineMode ?\n            this.loadFactory((/** @type {?} */ (type))) : this.loadAndCompile((/** @type {?} */ (type)));\n    }\n    /**\n     * @private\n     * @param {?} factory\n     * @return {?}\n     */\n    loadFactory(factory) {\n        return new Promise((/**\n         * @param {?} resolve\n         * @return {?}\n         */\n        resolve => resolve(factory)));\n    }\n    /**\n     * @private\n     * @param {?} type\n     * @return {?}\n     */\n    loadAndCompile(type) {\n        return this.compiler.compileModuleAsync(type);\n    }\n}\nModuleMapNgFactoryLoader.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nModuleMapNgFactoryLoader.ctorParameters = () => [\n    { type: Compiler },\n    { type: undefined, decorators: [{ type: Inject, args: [MODULE_MAP,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ModuleMapNgFactoryLoader.prototype.compiler;\n    /**\n     * @type {?}\n     * @private\n     */\n    ModuleMapNgFactoryLoader.prototype.moduleMap;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Helper function for getting the providers object for the MODULE_MAP\n *\n * @param {?} moduleMap Map to use as a value for MODULE_MAP\n * @return {?}\n */\nfunction provideModuleMap(moduleMap) {\n    return {\n        provide: MODULE_MAP,\n        useValue: moduleMap\n    };\n}\n/**\n * Module for using a NgModuleFactoryLoader which does not lazy load\n */\nclass ModuleMapLoaderModule {\n    /**\n     * Returns a ModuleMapLoaderModule along with a MODULE_MAP\n     *\n     * @param {?} moduleMap Map to use as a value for MODULE_MAP\n     * @return {?}\n     */\n    static withMap(moduleMap) {\n        return {\n            ngModule: ModuleMapLoaderModule,\n            providers: [\n                {\n                    provide: MODULE_MAP,\n                    useValue: moduleMap\n                }\n            ]\n        };\n    }\n}\nModuleMapLoaderModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    {\n                        provide: NgModuleFactoryLoader,\n                        useClass: ModuleMapNgFactoryLoader\n                    }\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { provideModuleMap, ModuleMapLoaderModule, MODULE_MAP, ModuleMapNgFactoryLoader };\n"]}