/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Injectable, InjectionToken, Inject, Compiler } from '@angular/core';
/**
 * Token used by the ModuleMapNgFactoryLoader to load modules
 * @type {?}
 */
import * as ɵngcc0 from '@angular/core';
export const MODULE_MAP = new InjectionToken('MODULE_MAP');
/**
 * NgModuleFactoryLoader which does not lazy load
 */
export class ModuleMapNgFactoryLoader {
    /**
     * @param {?} compiler
     * @param {?} moduleMap
     */
    constructor(compiler, moduleMap) {
        this.compiler = compiler;
        this.moduleMap = moduleMap;
    }
    /**
     * @param {?} loadChildrenString
     * @return {?}
     */
    load(loadChildrenString) {
        /** @type {?} */
        const offlineMode = this.compiler instanceof Compiler;
        /** @type {?} */
        const type = this.moduleMap[loadChildrenString];
        if (!type) {
            throw new Error(`${loadChildrenString} did not exist in the MODULE_MAP`);
        }
        return offlineMode ?
            this.loadFactory((/** @type {?} */ (type))) : this.loadAndCompile((/** @type {?} */ (type)));
    }
    /**
     * @private
     * @param {?} factory
     * @return {?}
     */
    loadFactory(factory) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => resolve(factory)));
    }
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    loadAndCompile(type) {
        return this.compiler.compileModuleAsync(type);
    }
}
ModuleMapNgFactoryLoader.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: ModuleMapNgFactoryLoader, factory: function ModuleMapNgFactoryLoader_Factory(t) { return new (t || ModuleMapNgFactoryLoader)(ɵngcc0.ɵɵinject(Compiler), ɵngcc0.ɵɵinject(MODULE_MAP)); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ModuleMapNgFactoryLoader, [{
        type: Injectable
    }], function () { return [{ type: Compiler }, { type: undefined, decorators: [{
                type: Inject,
                args: [MODULE_MAP]
            }] }]; }, { constructor: [], compiler: [], moduleMap: [], load: [], loadFactory: [], loadAndCompile: [] });
/** @nocollapse */
ModuleMapNgFactoryLoader.ctorParameters = () => [
    { type: Compiler },
    { type: undefined, decorators: [{ type: Inject, args: [MODULE_MAP,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ModuleMapNgFactoryLoader.prototype.compiler;
    /**
     * @type {?}
     * @private
     */
    ModuleMapNgFactoryLoader.prototype.moduleMap;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3NlcmdpL3NvdXJjZS9yZXBvcy9UZW1wbGF0ZS9UZW1wbGF0ZS9DbGllbnRBcHAvbm9kZV9tb2R1bGVzL0BuZ3VuaXZlcnNhbC9tb2R1bGUtbWFwLW5nZmFjdG9yeS1sb2FkZXIvZXNtMjAxNS9zcmMvbW9kdWxlLW1hcC1uZ2ZhY3RvcnktbG9hZGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztBQWdCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWdEQyxzSEFHQyIsImZpbGUiOiJtb2R1bGUtbWFwLW5nZmFjdG9yeS1sb2FkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiwgSW5qZWN0LCBDb21waWxlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBUb2tlbiB1c2VkIGJ5IHRoZSBNb2R1bGVNYXBOZ0ZhY3RvcnlMb2FkZXIgdG8gbG9hZCBtb2R1bGVzXG4gKiBAdHlwZSB7P31cbiAqL1xuZXhwb3J0IGNvbnN0IE1PRFVMRV9NQVAgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ01PRFVMRV9NQVAnKTtcbi8qKlxuICogTmdNb2R1bGVGYWN0b3J5TG9hZGVyIHdoaWNoIGRvZXMgbm90IGxhenkgbG9hZFxuICovXG5leHBvcnQgY2xhc3MgTW9kdWxlTWFwTmdGYWN0b3J5TG9hZGVyIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGNvbXBpbGVyXG4gICAgICogQHBhcmFtIHs/fSBtb2R1bGVNYXBcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb21waWxlciwgbW9kdWxlTWFwKSB7XG4gICAgICAgIHRoaXMuY29tcGlsZXIgPSBjb21waWxlcjtcbiAgICAgICAgdGhpcy5tb2R1bGVNYXAgPSBtb2R1bGVNYXA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbG9hZENoaWxkcmVuU3RyaW5nXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBsb2FkKGxvYWRDaGlsZHJlblN0cmluZykge1xuICAgICAgICAvKiogQHR5cGUgez99ICovXG4gICAgICAgIGNvbnN0IG9mZmxpbmVNb2RlID0gdGhpcy5jb21waWxlciBpbnN0YW5jZW9mIENvbXBpbGVyO1xuICAgICAgICAvKiogQHR5cGUgez99ICovXG4gICAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLm1vZHVsZU1hcFtsb2FkQ2hpbGRyZW5TdHJpbmddO1xuICAgICAgICBpZiAoIXR5cGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtsb2FkQ2hpbGRyZW5TdHJpbmd9IGRpZCBub3QgZXhpc3QgaW4gdGhlIE1PRFVMRV9NQVBgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2ZmbGluZU1vZGUgP1xuICAgICAgICAgICAgdGhpcy5sb2FkRmFjdG9yeSgoLyoqIEB0eXBlIHs/fSAqLyAodHlwZSkpKSA6IHRoaXMubG9hZEFuZENvbXBpbGUoKC8qKiBAdHlwZSB7P30gKi8gKHR5cGUpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHs/fSBmYWN0b3J5XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBsb2FkRmFjdG9yeShmYWN0b3J5KSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoLyoqXG4gICAgICAgICAqIEBwYXJhbSB7P30gcmVzb2x2ZVxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAgcmVzb2x2ZSA9PiByZXNvbHZlKGZhY3RvcnkpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHs/fSB0eXBlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBsb2FkQW5kQ29tcGlsZSh0eXBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBpbGVyLmNvbXBpbGVNb2R1bGVBc3luYyh0eXBlKTtcbiAgICB9XG59XG5Nb2R1bGVNYXBOZ0ZhY3RvcnlMb2FkZXIuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IEluamVjdGFibGUgfVxuXTtcbi8qKiBAbm9jb2xsYXBzZSAqL1xuTW9kdWxlTWFwTmdGYWN0b3J5TG9hZGVyLmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xuICAgIHsgdHlwZTogQ29tcGlsZXIgfSxcbiAgICB7IHR5cGU6IHVuZGVmaW5lZCwgZGVjb3JhdG9yczogW3sgdHlwZTogSW5qZWN0LCBhcmdzOiBbTU9EVUxFX01BUCxdIH1dIH1cbl07XG5pZiAoZmFsc2UpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIE1vZHVsZU1hcE5nRmFjdG9yeUxvYWRlci5wcm90b3R5cGUuY29tcGlsZXI7XG4gICAgLyoqXG4gICAgICogQHR5cGUgez99XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBNb2R1bGVNYXBOZ0ZhY3RvcnlMb2FkZXIucHJvdG90eXBlLm1vZHVsZU1hcDtcbn1cbiJdfQ==