{"version":3,"sources":["c:/Users/sergi/source/repos/Template/Template/ClientApp/node_modules/@nguniversal/module-map-ngfactory-loader/fesm5/module-map-ngfactory-loader.js"],"names":[],"mappings":"AAAA;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;2CAwB2C,AACtB;;;;;;;;;;sGAGY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCAsCD;;;;;;;;;;;;;;;;;;SAUF","file":"module-map-ngfactory-loader.js","sourcesContent":["import { __decorate, __param, __metadata } from 'tslib';\nimport { InjectionToken, Compiler, Injectable, Inject, NgModule, NgModuleFactoryLoader } from '@angular/core';\n\n/**\n * Token used by the ModuleMapNgFactoryLoader to load modules\n */\nvar MODULE_MAP = new InjectionToken('MODULE_MAP');\n/**\n * NgModuleFactoryLoader which does not lazy load\n */\nvar ModuleMapNgFactoryLoader = /** @class */ (function () {\n    function ModuleMapNgFactoryLoader(compiler, moduleMap) {\n        this.compiler = compiler;\n        this.moduleMap = moduleMap;\n    }\n    ModuleMapNgFactoryLoader.prototype.load = function (loadChildrenString) {\n        var offlineMode = this.compiler instanceof Compiler;\n        var type = this.moduleMap[loadChildrenString];\n        if (!type) {\n            throw new Error(loadChildrenString + \" did not exist in the MODULE_MAP\");\n        }\n        return offlineMode ?\n            this.loadFactory(type) : this.loadAndCompile(type);\n    };\n    ModuleMapNgFactoryLoader.prototype.loadFactory = function (factory) {\n        return new Promise(function (resolve) { return resolve(factory); });\n    };\n    ModuleMapNgFactoryLoader.prototype.loadAndCompile = function (type) {\n        return this.compiler.compileModuleAsync(type);\n    };\n    ModuleMapNgFactoryLoader = __decorate([\n        Injectable(),\n        __param(1, Inject(MODULE_MAP)),\n        __metadata(\"design:paramtypes\", [Compiler, Object])\n    ], ModuleMapNgFactoryLoader);\n    return ModuleMapNgFactoryLoader;\n}());\n\n/**\n * Helper function for getting the providers object for the MODULE_MAP\n *\n * @param moduleMap Map to use as a value for MODULE_MAP\n */\nfunction provideModuleMap(moduleMap) {\n    return {\n        provide: MODULE_MAP,\n        useValue: moduleMap\n    };\n}\n/**\n * Module for using a NgModuleFactoryLoader which does not lazy load\n */\nvar ModuleMapLoaderModule = /** @class */ (function () {\n    function ModuleMapLoaderModule() {\n    }\n    ModuleMapLoaderModule_1 = ModuleMapLoaderModule;\n    /**\n     * Returns a ModuleMapLoaderModule along with a MODULE_MAP\n     *\n     * @param moduleMap Map to use as a value for MODULE_MAP\n     */\n    ModuleMapLoaderModule.withMap = function (moduleMap) {\n        return {\n            ngModule: ModuleMapLoaderModule_1,\n            providers: [\n                {\n                    provide: MODULE_MAP,\n                    useValue: moduleMap\n                }\n            ]\n        };\n    };\n    var ModuleMapLoaderModule_1;\n    ModuleMapLoaderModule = ModuleMapLoaderModule_1 = __decorate([\n        NgModule({\n            providers: [\n                {\n                    provide: NgModuleFactoryLoader,\n                    useClass: ModuleMapNgFactoryLoader\n                }\n            ]\n        })\n    ], ModuleMapLoaderModule);\n    return ModuleMapLoaderModule;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { provideModuleMap, ModuleMapLoaderModule, MODULE_MAP, ModuleMapNgFactoryLoader };\n"]}